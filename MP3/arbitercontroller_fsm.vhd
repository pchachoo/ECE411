-- VHDL Entity ece411.ArbiterController.symbol
--
-- Created:
--          by - chachon2.ews (siebl-0222-02.ews.illinois.edu)
--          at - 16:59:31 08/12/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ArbiterController IS
   PORT( 
      ArbPMRESP_H : IN     STD_LOGIC;
      D_PMREAD_L  : IN     STD_LOGIC;
      D_PMWRITE_L : IN     STD_LOGIC;
      I_PMREAD_L  : IN     STD_LOGIC;
      RESET_L     : IN     STD_LOGIC;
      clk         : IN     std_logic;
      ArbiterSel  : OUT    STD_LOGIC
   );

-- Declarations

END ArbiterController ;

--
-- VHDL Architecture ece411.ArbiterController.fsm
--
-- Created:
--          by - chachon2.ews (siebl-0222-02.ews.illinois.edu)
--          at - 16:59:31 08/12/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF ArbiterController IS

   TYPE STATE_TYPE IS (
      S,
      Instr,
      Data
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= S;
      ELSIF (rising_edge(clk)) THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      ArbPMRESP_H,
      D_PMREAD_L,
      D_PMWRITE_L,
      I_PMREAD_L,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN S => 
            IF (I_PMREAD_L = '0') THEN 
               next_state <= Instr;
            ELSIF (D_PMREAD_L = '0' OR D_PMWRITE_L = '0') THEN 
               next_state <= Data;
            ELSE
               next_state <= S;
            END IF;
         WHEN Instr => 
            IF (ArbPMRESP_H = '1') THEN 
               next_state <= S;
            ELSE
               next_state <= Instr;
            END IF;
         WHEN Data => 
            IF (ArbPMRESP_H='1') THEN 
               next_state <= S;
            ELSE
               next_state <= Data;
            END IF;
         WHEN OTHERS =>
            next_state <= S;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ArbiterSel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN Instr => 
            ArbiterSEl <= '0';
         WHEN Data => 
            ArbiterSel <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
