-- VHDL Entity ece411.CacheDatapath.symbol
--
-- Created:
--          by - chachon2.ews (linux-a2.ews.illinois.edu)
--          at - 17:42:49 08/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY CacheDatapath IS
   PORT( 
      ADDRESS    : IN     LC3b_word;
      CLK        : IN     STD_LOGIC;
      DATAOUT    : IN     LC3b_word;
      MREAD_L    : IN     std_logic;
      MWRITEH_L  : IN     std_logic;
      MWRITEL_L  : IN     std_logic;
      PMDATAIN   : IN     LC3B_OWORD;
      PMRESP_H   : IN     STD_LOGIC;
      RESET_L    : IN     STD_LOGIC;
      in_idlehit : IN     STD_LOGIC;
      in_load    : IN     STD_LOGIC;
      in_store   : IN     STD_LOGIC;
      in_wb      : IN     STD_LOGIC;
      DATAIN     : OUT    LC3b_word;
      Dirty      : OUT    STD_LOGIC;
      MISS       : OUT    STD_LOGIC;
      MRESP_H    : OUT    std_logic;
      PMADDRESS  : OUT    LC3B_WORD;
      PMDATAOUT  : OUT    LC3B_OWORD;
      store_op   : OUT    STD_LOGIC
   );

-- Declarations

END CacheDatapath ;

--
-- VHDL Architecture ece411.CacheDatapath.struct
--
-- Created:
--          by - chachon2.ews (linux-a2.ews.illinois.edu)
--          at - 17:42:50 08/07/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF CacheDatapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CacheTag0        : LC3B_C_TAG;
   SIGNAL CacheTag1        : LC3B_C_TAG;
   SIGNAL ClkInv           : STD_LOGIC;
   SIGNAL CombAdd          : LC3b_word;
   SIGNAL DelTag           : LC3b_C_tag;
   SIGNAL DelayOut0        : std_logic;
   SIGNAL DelayOut1        : std_logic;
   SIGNAL DelayedClk       : std_logic;
   SIGNAL Dirty0           : std_logic;
   SIGNAL Dirty1           : std_logic;
   SIGNAL DirtyIN          : std_logic;
   SIGNAL F                : STD_LOGIC;
   SIGNAL F1               : STD_LOGIC;
   SIGNAL F2               : STD_LOGIC;
   SIGNAL F3               : STD_LOGIC;
   SIGNAL F4               : STD_LOGIC;
   SIGNAL F5               : STD_LOGIC;
   SIGNAL F6               : STD_LOGIC;
   SIGNAL F7               : STD_LOGIC;
   SIGNAL F8               : STD_LOGIC;
   SIGNAL F9               : STD_LOGIC;
   SIGNAL HIt0Write        : STD_LOGIC;
   SIGNAL Hit1Write        : STD_LOGIC;
   SIGNAL HitValidRange    : std_logic;
   SIGNAL Index3           : LC3B_C_INDEX;
   SIGNAL LOad1Write       : STD_LOGIC;
   SIGNAL LRUInv           : STD_LOGIC;
   SIGNAL LRUOut           : STD_LOGIC;
   SIGNAL LineMux2Out      : LC3B_OWORD;
   SIGNAL Load0Write       : STD_LOGIC;
   SIGNAL MemAccess        : STD_LOGIC;
   SIGNAL OffSelOut        : LC3B_CC;
   SIGNAL Offset4          : LC3B_C_OFFSET;
   SIGNAL PreHit0          : STD_LOGIC;
   SIGNAL Tag9             : LC3B_C_TAG;
   SIGNAL TagCompOut0      : std_logic;
   SIGNAL TagCompOut1      : std_logic;
   SIGNAL TagWrite         : std_logic;
   SIGNAL Valid0           : std_logic := '0';
   SIGNAL Valid1           : std_logic := '0';
   SIGNAL WWCDataOut       : LC3b_OWORD;
   SIGNAL WWCDataOut1      : LC3b_OWORD;
   SIGNAL WWCDataOutPreDel : LC3b_OWORD;
   SIGNAL Way0Write        : STD_LOGIC;
   SIGNAL Way1Write        : STD_LOGIC;
   SIGNAL WayData0         : LC3B_OWORD;
   SIGNAL WayData1         : LC3B_OWORD;
   SIGNAL WayDataLine      : LC3B_OWORD;
   SIGNAL WriteAccess      : STD_LOGIC;
   SIGNAL Zero             : STD_LOGIC;
   SIGNAL hit              : STD_LOGIC;
   SIGNAL prehit1          : STD_LOGIC;

   -- Implicit buffer signal declarations
   SIGNAL store_op_internal : STD_LOGIC;


   -- Component Declarations
   COMPONENT AND4
   PORT (
      In0     : IN     std_logic ;
      In1     : IN     std_logic ;
      In2     : IN     std_logic ;
      In3     : IN     std_logic ;
      AND4Out : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AddressCombiner1
   PORT (
      DelTag  : IN     LC3b_C_tag ;
      CombAdd : OUT    LC3b_word ;
      Index3  : IN     LC3B_C_INDEX 
   );
   END COMPONENT;
   COMPONENT AddressSplitterComp
   PORT (
      Offset4 : OUT    LC3B_C_OFFSET ;
      Index3  : OUT    LC3B_C_INDEX ;
      Tag9    : OUT    LC3B_C_TAG ;
      ADDRESS : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT CacheWay
   PORT (
      CacheWayDataIN : IN     LC3B_OWORD ;
      CacheWayWrite  : IN     std_logic ;
      DirtyIN        : IN     std_logic ;
      DirtyWrite     : IN     std_logic ;
      INDEX          : IN     LC3B_C_INDEX ;
      RESET_L        : IN     std_logic ;
      Tag            : IN     LC3B_C_TAG ;
      TagWrite       : IN     std_logic ;
      CacheLine      : OUT    LC3B_OWORD ;
      CacheTag       : OUT    LC3B_C_TAG ;
      Dirty          : OUT    std_logic ;
      Valid          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ClkDelay
   PORT (
      Clk        : IN     std_logic ;
      DelayedClk : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DelayBlk
   PORT (
      BeforeDelay : IN     STD_LOGIC;
      DelayOut    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT DelayBlock5ns1
   PORT (
      WWCDataOutPreDel : IN     LC3b_OWORD ;
      WWCDataOut       : OUT    LC3b_OWORD 
   );
   END COMPONENT;
   COMPONENT GenMResp1
   PORT (
      PMRESP_H : IN     STD_LOGIC ;
      hit      : IN     STD_LOGIC ;
      MRESP_H  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRU
   PORT (
      Index    : IN     LC3b_C_INDEX ;
      LRUIN    : IN     std_logic ;
      LRUWrite : IN     std_logic ;
      RESET_L  : IN     std_logic ;
      LRUOut   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3b_OWORD ;
      B   : IN     LC3b_OWORD ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_OWORD 
   );
   END COMPONENT;
   COMPONENT OffsetSelector1
   PORT (
      Offset4   : IN     LC3B_C_OFFSET ;
      OffSelOut : OUT    LC3B_CC 
   );
   END COMPONENT;
   COMPONENT TagComparator
   PORT (
      AddressTag : IN     LC3b_C_Tag ;
      CacheTag   : IN     LC3b_C_Tag ;
      TagCompOut : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT TagMux2
   PORT (
      A   : IN     LC3b_C_tag ;
      B   : IN     LC3b_C_tag ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_C_tag 
   );
   END COMPONENT;
   COMPONENT WayDataSel1
   PORT (
      OffSelOut   : IN     LC3B_CC ;
      WayDataLine : IN     LC3B_OWORD ;
      DATAIN      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WriteDataCombiner
   PORT (
      DATAOUT    : IN     LC3b_WORD ;
      MWRITEH_L  : IN     std_logic ;
      MWRITEL_L  : IN     std_logic ;
      OffSelOut  : IN     LC3b_CC ;
      WayDIN     : IN     LC3b_OWORD ;
      WWCDataOut : OUT    LC3b_OWORD 
   );
   END COMPONENT;
   COMPONENT ZeroBlock1
   PORT (
      Zero : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT XOR2
   PORT (
      a : IN     std_logic ;
      b : IN     std_logic ;
      f : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : AND4 USE ENTITY ece411.AND4;
   FOR ALL : AddressCombiner1 USE ENTITY ece411.AddressCombiner1;
   FOR ALL : AddressSplitterComp USE ENTITY ece411.AddressSplitterComp;
   FOR ALL : CacheWay USE ENTITY ece411.CacheWay;
   FOR ALL : ClkDelay USE ENTITY ece411.ClkDelay;
   FOR ALL : DelayBlk USE ENTITY ece411.DelayBlk;
   FOR ALL : DelayBlock5ns1 USE ENTITY ece411.DelayBlock5ns1;
   FOR ALL : GenMResp1 USE ENTITY ece411.GenMResp1;
   FOR ALL : LRU USE ENTITY ece411.LRU;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NAND3 USE ENTITY mp3lib.NAND3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : OffsetSelector1 USE ENTITY ece411.OffsetSelector1;
   FOR ALL : TagComparator USE ENTITY ece411.TagComparator;
   FOR ALL : TagMux2 USE ENTITY ece411.TagMux2;
   FOR ALL : WayDataSel1 USE ENTITY ece411.WayDataSel1;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WriteDataCombiner USE ENTITY ece411.WriteDataCombiner;
   FOR ALL : XOR2 USE ENTITY mp3lib.XOR2;
   FOR ALL : ZeroBlock1 USE ENTITY ece411.ZeroBlock1;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   HitAND : AND4
      PORT MAP (
         In0     => F2,
         In1     => HitValidRange,
         In2     => in_idlehit,
         In3     => MemAccess,
         AND4Out => hit
      );
   aAddressCombiner : AddressCombiner1
      PORT MAP (
         DelTag  => DelTag,
         CombAdd => CombAdd,
         Index3  => Index3
      );
   U_25 : AddressSplitterComp
      PORT MAP (
         Offset4 => Offset4,
         Index3  => Index3,
         Tag9    => Tag9,
         ADDRESS => ADDRESS
      );
   CacheWay0 : CacheWay
      PORT MAP (
         CacheWayDataIN => WWCDataOut,
         CacheWayWrite  => Way0Write,
         DirtyIN        => DirtyIN,
         DirtyWrite     => Way0Write,
         INDEX          => Index3,
         RESET_L        => RESET_L,
         Tag            => Tag9,
         TagWrite       => F8,
         CacheLine      => WayData0,
         CacheTag       => CacheTag0,
         Dirty          => Dirty0,
         Valid          => Valid0
      );
   CacheWay1 : CacheWay
      PORT MAP (
         CacheWayDataIN => WWCDataOut,
         CacheWayWrite  => Way1Write,
         DirtyIN        => DirtyIN,
         DirtyWrite     => Way1Write,
         INDEX          => Index3,
         RESET_L        => RESET_L,
         Tag            => Tag9,
         TagWrite       => TagWrite,
         CacheLine      => WayData1,
         CacheTag       => CacheTag1,
         Dirty          => Dirty1,
         Valid          => Valid1
      );
   U_2 : ClkDelay
      PORT MAP (
         Clk        => CLK,
         DelayedClk => DelayedClk
      );
   U_28 : DelayBlk
      PORT MAP (
         DelayOut    => DelayOut0,
         BeforeDelay => F
      );
   U_29 : DelayBlk
      PORT MAP (
         DelayOut    => DelayOut1,
         BeforeDelay => F3
      );
   aDelay5ns : DelayBlock5ns1
      PORT MAP (
         WWCDataOutPreDel => WWCDataOutPreDel,
         WWCDataOut       => WWCDataOut
      );
   aMemResp : GenMResp1
      PORT MAP (
         PMRESP_H => PMRESP_H,
         hit      => hit,
         MRESP_H  => MRESP_H
      );
   aLRU : LRU
      PORT MAP (
         Index    => Index3,
         LRUIN    => PreHit0,
         LRUWrite => hit,
         RESET_L  => RESET_L,
         LRUOut   => LRUOut
      );
   LineDataMux : OWordMux2
      PORT MAP (
         A   => WayData0,
         B   => WayData1,
         Sel => prehit1,
         F   => LineMux2Out
      );
   U_16 : OWordMux2
      PORT MAP (
         A   => WayData0,
         B   => WayData1,
         Sel => prehit1,
         F   => WayDataLine
      );
   U_18 : OWordMux2
      PORT MAP (
         A   => WWCDataOut1,
         B   => PMDATAIN,
         Sel => in_load,
         F   => WWCDataOutPreDel
      );
   U_20 : OWordMux2
      PORT MAP (
         A   => WayData0,
         B   => WayData1,
         Sel => LRUOut,
         F   => PMDATAOUT
      );
   OffSel : OffsetSelector1
      PORT MAP (
         Offset4   => Offset4,
         OffSelOut => OffSelOut
      );
   TagComp0 : TagComparator
      PORT MAP (
         AddressTag => Tag9,
         CacheTag   => CacheTag0,
         TagCompOut => TagCompOut0
      );
   TagComp1 : TagComparator
      PORT MAP (
         AddressTag => Tag9,
         CacheTag   => CacheTag1,
         TagCompOut => TagCompOut1
      );
   U_17 : TagMux2
      PORT MAP (
         A   => CacheTag0,
         B   => CacheTag1,
         Sel => LRUOut,
         F   => DelTag
      );
   aWayDataSel : WayDataSel1
      PORT MAP (
         OffSelOut   => OffSelOut,
         WayDataLine => WayDataLine,
         DATAIN      => DATAIN
      );
   U_19 : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => CombAdd,
         Sel => in_wb,
         F   => PMADDRESS
      );
   aWDC : WriteDataCombiner
      PORT MAP (
         DATAOUT    => DATAOUT,
         MWRITEH_L  => MWRITEH_L,
         MWRITEL_L  => MWRITEL_L,
         OffSelOut  => OffSelOut,
         WayDIN     => LineMux2Out,
         WWCDataOut => WWCDataOut1
      );
   aZeroBlock : ZeroBlock1
      PORT MAP (
         Zero => Zero
      );
   U_4 : AND2
      PORT MAP (
         A => F4,
         B => MemAccess,
         F => MISS
      );
   U_14 : AND2
      PORT MAP (
         A => F5,
         B => LRUInv,
         F => F8
      );
   U_15 : AND2
      PORT MAP (
         A => LRUOut,
         B => F9,
         F => TagWrite
      );
   U_21 : AND2
      PORT MAP (
         A => ClkInv,
         B => DelayedClk,
         F => HitValidRange
      );
   aAND2_0 : AND2
      PORT MAP (
         A => TagCompOut0,
         B => Valid0,
         F => PreHit0
      );
   aAND2_1 : AND2
      PORT MAP (
         A => TagCompOut1,
         B => Valid1,
         F => prehit1
      );
   U_6 : AND3
      PORT MAP (
         A => LRUInv,
         B => PMRESP_H,
         C => in_load,
         F => Load0Write
      );
   U_7 : AND3
      PORT MAP (
         A => LRUOut,
         B => PMRESP_H,
         C => in_load,
         F => LOad1Write
      );
   U_8 : AND3
      PORT MAP (
         A => PreHit0,
         B => hit,
         C => WriteAccess,
         F => HIt0Write
      );
   U_9 : AND3
      PORT MAP (
         A => prehit1,
         B => hit,
         C => WriteAccess,
         F => Hit1Write
      );
   U_23 : AND3
      PORT MAP (
         A => WriteAccess,
         B => LRUOut,
         C => in_store,
         F => F3
      );
   U_26 : AND3
      PORT MAP (
         A => WriteAccess,
         B => in_store,
         C => LRUInv,
         F => F
      );
   DirtyDelayMux : MUX2_1
      PORT MAP (
         A   => Zero,
         B   => WriteAccess,
         SEL => F1,
         F   => DirtyIN
      );
   DirtyMux : MUX2_1
      PORT MAP (
         A   => Dirty1,
         B   => Dirty0,
         SEL => LRUOut,
         F   => Dirty
      );
   U_5 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => WriteAccess
      );
   U_24 : NAND2
      PORT MAP (
         A => MWRITEH_L,
         B => MWRITEL_L,
         F => store_op_internal
      );
   MemAccessNAND : NAND3
      PORT MAP (
         A => MREAD_L,
         B => MWRITEH_L,
         C => MWRITEL_L,
         F => MemAccess
      );
   U_3 : NOT1
      PORT MAP (
         A => F2,
         F => F4
      );
   U_10 : NOT1
      PORT MAP (
         A => LRUOut,
         F => LRUInv
      );
   U_22 : NOT1
      PORT MAP (
         A => CLK,
         F => ClkInv
      );
   U_1 : OR2
      PORT MAP (
         A => prehit1,
         B => PreHit0,
         F => F2
      );
   U_11 : OR2
      PORT MAP (
         A => Hit1Write,
         B => LOad1Write,
         F => F7
      );
   U_12 : OR2
      PORT MAP (
         A => in_load,
         B => WriteAccess,
         F => F1
      );
   U_27 : OR2
      PORT MAP (
         A => HIt0Write,
         B => Load0Write,
         F => F6
      );
   U_30 : OR2
      PORT MAP (
         A => store_op_internal,
         B => in_load,
         F => F5
      );
   U_31 : OR2
      PORT MAP (
         A => in_load,
         B => store_op_internal,
         F => F9
      );
   U_0 : XOR2
      PORT MAP (
         a => F7,
         b => DelayOut1,
         f => Way1Write
      );
   U_13 : XOR2
      PORT MAP (
         a => F6,
         b => DelayOut0,
         f => Way0Write
      );

   -- Implicit buffered output assignments
   store_op <= store_op_internal;

END struct;
