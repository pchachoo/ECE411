-- VHDL Entity ece411.PIPELINED_Datapath.symbol
--
-- Created:
--          by - chachon2.ews (siebl-0222-02.ews.illinois.edu)
--          at - 16:59:32 08/12/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY PIPELINED_Datapath IS
   PORT( 
      D_MRESP_H   : IN     std_logic  := '0';
      --RESET_L     : IN     std_logic;
      I_MRESP_H   : IN     std_logic  := '0';
      RESET_L     : IN     std_logic;
      clk         : IN     std_logic;
      d_datain    : IN     LC3b_word;
      i_datain    : IN     LC3b_word;
      D_MREAD_L   : OUT    std_logic  := '1';
      D_MWRITEH_L : OUT    std_logic  := '1';
      D_MWRITEL_L : OUT    std_logic  := '1';
      D_dataout   : OUT    LC3b_word;
      I_MREAD_L   : OUT    std_logic  := '1';
      I_address   : OUT    LC3B_WORD;
      d_address   : OUT    LC3B_WORD
   );

-- Declarations

END PIPELINED_Datapath ;

--
-- VHDL Architecture ece411.PIPELINED_Datapath.struct
--
-- Created:
--          by - chachon2.ews (siebl-0222-02.ews.illinois.edu)
--          at - 16:59:32 08/12/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF PIPELINED_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out        : LC3b_word;
   SIGNAL ADJ5out         : LC3b_word;
   SIGNAL ADJ9out         : LC3b_word;
   SIGNAL ALUMemSel_EX    : std_logic;
   SIGNAL ALUMemSel_ID    : std_logic;
   SIGNAL ALUMemSel_MEM   : std_logic;
   SIGNAL ALUMemSel_WB    : std_logic;
   SIGNAL ALUMuxSel_EX    : LC3B_4MUX_SEL;
   SIGNAL ALUMuxSel_ID    : LC3B_4MUX_SEL;
   SIGNAL ALUOP_ID        : LC3b_aluop;
   SIGNAL ALUOut          : LC3b_word;
   SIGNAL ALUop_EX        : LC3b_ALUop;
   SIGNAL ALUorTRAPPC     : LC3b_word;
   SIGNAL ALUout_WB       : lc3b_word;
   SIGNAL Aluout_mem      : LC3b_word;
   SIGNAL B               : LC3b_word;
   SIGNAL B1              : LC3b_word;
   SIGNAL B4              : LC3b_word;
   SIGNAL BeforeDelay     : LC3B_WORD;
   SIGNAL Bit4            : std_logic;
   SIGNAL Bit5            : std_logic;
   SIGNAL BranchSelPC     : LC3b_word;
   SIGNAL Branch_ID       : std_logic;
   SIGNAL Branch_Sel      : STD_LOGIC;
   SIGNAL Branch_Sel2     : STD_LOGIC;
   SIGNAL Branch_mem      : std_logic;
   SIGNAL CheckN          : std_logic := '0';
   SIGNAL CheckP          : std_logic := '0';
   SIGNAL CheckZ          : std_logic := '0';
   SIGNAL DataRead        : LC3b_word;
   SIGNAL DelayOut        : std_logic;
   SIGNAL DestIR_EX       : lc3b_reg;
   -- Declarations
   SIGNAL DestIR_MEM      : lc3b_reg;
   SIGNAL DestIR_WB       : lc3b_reg;
   SIGNAL F               : LC3b_word;
   SIGNAL F1              : STD_LOGIC;
   SIGNAL F2              : STD_LOGIC;
   SIGNAL F3              : STD_LOGIC;
   SIGNAL F4              : LC3b_word;
   SIGNAL F5              : LC3b_word;
   SIGNAL F6              : LC3b_word;
   SIGNAL GenCCout        : LC3b_cc;
   SIGNAL GenCCout1       : LC3b_cc;
   SIGNAL ImmSel_EX       : STD_LOGIC;
   SIGNAL ImmSel_ID       : std_logic;
   SIGNAL ImmValue4       : lc3b_nibble;
   SIGNAL ImmValue5       : LC3B_IMM5;
   SIGNAL Input           : LC3b_word;
   SIGNAL InstrIN         : lc3b_word;
   SIGNAL InstrOut        : lc3b_word;
   SIGNAL JSRRSel_ID      : std_logic;
   SIGNAL JSRSel_EX       : std_logic;
   SIGNAL JSRSel_ID       : std_logic;
   SIGNAL JSR_RBit11      : std_logic;
   SIGNAL JumpSelPC       : LC3b_word;
   SIGNAL LDISIG          : std_logic;
   SIGNAL LDI_STI_EX      : std_logic;
   SIGNAL LDI_STI_ID      : std_logic;
   SIGNAL LDI_STI_MEM     : std_logic;
   SIGNAL LEAMuxSel_ID    : std_logic;
   SIGNAL LOAD_EXMEM      : STD_LOGIC;
   SIGNAL LOAD_IDEX       : STD_LOGIC;
   SIGNAL LOAD_IF         : std_logic;
   SIGNAL LOAD_IFID       : STD_LOGIC;
   SIGNAL LOAD_MEMWB      : STD_LOGIC;
   --      FLUSH_L          : OUT    STD_LOGIC;
--      flush            : IN     STD_LOGIC;
--      BR_Miss          : OUT    STD_LOGIC;
--      Bubble           : OUT    STD_LOGIC
   SIGNAL MUX4Out1        : LC3b_word;
   SIGNAL NZPCompOut      : std_logic;
   SIGNAL NZP_WB          : lc3b_nzp;
   SIGNAL NZP_mem         : lc3b_nzp;
   SIGNAL Opcode          : LC3b_opcode;
   SIGNAL Opcode_EX       : lc3b_opcode;
   SIGNAL Opcode_ID       : lc3b_opcode;
   SIGNAL Opcode_MEM      : lc3b_opcode;
   SIGNAL Output          : std_logic;
   --load   : IN     std_logic;
   SIGNAL PC              : LC3b_word;
   SIGNAL PCOut           : LC3b_word;
   SIGNAL PCPlus2         : LC3b_word;
   SIGNAL PCPlus2_EX      : lc3b_word;
   SIGNAL PCPlus2_ID      : lc3b_word;
   SIGNAL PCPlus2_MEM     : lc3b_word;
   SIGNAL PC_EX           : lc3b_word;
   SIGNAL PC_EX1          : lc3b_word;
   SIGNAL PC_ID           : lc3b_word;
   SIGNAL PC_MEM          : lc3b_word;
   SIGNAL PC_WB           : LC3b_word;
   SIGNAL R7destOut       : Lc3b_reg;
   SIGNAL RFAOut          : LC3b_word;
   SIGNAL RFAout1         : LC3b_word;
   SIGNAL RFBout          : LC3b_word;
   SIGNAL RFDout          : LC3b_word;
   SIGNAL Read_EX         : std_logic;
   SIGNAL Read_ID         : std_logic := '0';
   SIGNAL Read_MEM        : std_logic := '0';
   SIGNAL RegWrite_EX     : std_logic := '0';
   SIGNAL RegWrite_ID     : std_logic := '0';
   SIGNAL RegWrite_MEM    : std_logic;
   SIGNAL RegWrite_WB     : std_logic;
   SIGNAL Reg_input       : std_logic;
   SIGNAL SETCC_MEM       : std_logic;
   SIGNAL SRCB_DATA_EX    : lc3b_word;
   SIGNAL SRCB_FU         : lc3b_word;
   SIGNAL STISIG          : STD_LOGIC;
   SIGNAL STISIG2         : std_logic;
   SIGNAL STRSel_ID       : std_logic;
   SIGNAL STR_data_MEM    : lc3b_word;
   SIGNAL Sel             : std_logic;
   SIGNAL SetCC_EX        : std_logic;
   SIGNAL SetCC_ID        : std_logic := '0';
   SIGNAL SrcA            : lc3b_reg;
   SIGNAL SrcA_EX         : LC3B_REG;
   SIGNAL SrcA_FU         : LC3B_WORD;
   SIGNAL SrcB            : lc3b_reg;
   SIGNAL SrcB_EX         : LC3B_REG;
   SIGNAL TrapPCout       : LC3B_WORD;
   SIGNAL TrapPCout_EX    : lc3b_word;
   SIGNAL TrapVec8        : LC3b_trapvect8;
   SIGNAL WRITE_EX        : std_logic;
   SIGNAL WriteData1      : LC3b_word;
   SIGNAL Write_ID        : std_logic := '0';
   SIGNAL Write_MEM       : std_logic := '0';
   SIGNAL ZextSel_EX      : std_logic;
   SIGNAL ZextSel_ID      : std_logic := '0';
   SIGNAL ZextSel_MEM     : std_logic := '0';
   SIGNAL ZextSel_WB      : std_logic;
   SIGNAL aRegip          : std_logic;
   SIGNAL adj_imm5_EX     : lc3b_word;
   SIGNAL adj_offset11_EX : lc3b_word;
   SIGNAL adj_offset6_EX  : lc3b_word;
   SIGNAL adj_offset6_ID  : lc3b_word;
   SIGNAL adj_offset9_EX  : lc3b_word;
   SIGNAL branch_ex       : std_logic;
   SIGNAL dataout_WB      : lc3b_word;
   SIGNAL destIR          : lc3b_reg;
   SIGNAL destIR_EX1      : lc3b_reg;
   SIGNAL index6          : lc3b_index6;
   SIGNAL jsrrsel_ex      : std_logic;
   SIGNAL jump_EX         : std_logic;
   SIGNAL jump_ID         : std_logic;
   SIGNAL latch_data      : std_logic;
   SIGNAL ldi             : STD_LOGIC;
   SIGNAL leamuxsel_ex    : std_logic;
   SIGNAL mux1Sel         : STD_LOGIC;
   SIGNAL mux2Sel         : STD_LOGIC;
   SIGNAL mux3Sel         : STD_LOGIC;
   SIGNAL muxw1Sel        : STD_LOGIC;
   SIGNAL muxw2Sel        : STD_LOGIC;
   SIGNAL muxw3Sel        : STD_LOGIC;
   SIGNAL n               : std_logic;
   --LoadNZP  : IN     std_logic;
--clk      : IN     std_logic;
   SIGNAL n1              : std_logic;
   --LoadNZP  : IN     std_logic;
--clk      : IN     std_logic;
   SIGNAL n2              : std_logic;
   SIGNAL newinstr        : std_logic;
   SIGNAL nzp_EX          : lc3b_nzp;
   SIGNAL nzp_ID          : lc3b_nzp;
   SIGNAL offset11        : LC3b_offset11;
   SIGNAL offset9         : lc3b_offset9;
   SIGNAL opSTI_EX        : std_logic;
   SIGNAL opSTI_ID        : std_logic;
   SIGNAL opSTI_MEM       : std_logic;
   SIGNAL p               : std_logic;
   SIGNAL p1              : std_logic;
   SIGNAL p2              : std_logic;
   SIGNAL setcc_wb        : std_logic;
   SIGNAL sext_offset6_EX : lc3b_word;
   SIGNAL sext_offset6_ID : lc3b_word;
   SIGNAL srca_data_ex    : lc3b_word;
   SIGNAL stall           : std_logic;
   SIGNAL sti             : STD_LOGIC;
   SIGNAL sti_counter     : INTEGER;
   SIGNAL str_data_ex     : lc3b_word;
   SIGNAL str_data_ex_fu  : lc3b_word;
   SIGNAL writedata       : LC3b_word;
   SIGNAL z               : std_logic;
   SIGNAL z1              : std_logic;
   SIGNAL z2              : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL D_MREAD_L_internal   : std_logic;
   SIGNAL D_MWRITEH_L_internal : std_logic;
   SIGNAL D_MWRITEL_L_internal : std_logic;
   SIGNAL I_MREAD_L_internal   : std_logic;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      --clk      : IN     std_logic;
      input    : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BlockBreaker1
   PORT (
      InstrIn    : IN     lc3b_word;
      clk        : IN     std_logic;
      Bit4       : OUT    std_logic;
      Bit5       : OUT    std_logic;
      ImmValue4  : OUT    lc3b_nibble;
      ImmValue5  : OUT    LC3B_IMM5;
      JSR_RBit11 : OUT    std_logic;
      Opcode     : OUT    LC3b_opcode;
      SrcA       : OUT    lc3b_reg;
      SrcB       : OUT    lc3b_reg;
      TrapVec8   : OUT    LC3b_trapvect8;
      destIR     : OUT    lc3b_reg;
      index6     : OUT    lc3b_index6;
      nzp_ID     : OUT    lc3b_nzp;
      offset11   : OUT    LC3b_offset11;
      offset9    : OUT    lc3b_offset9
   );
   END COMPONENT;
   COMPONENT ControlROM
   PORT (
      Bit4         : IN     std_logic;
      Bit5         : IN     std_logic;
      Clk          : IN     std_logic;
      JSR_RBit11   : IN     std_logic;
      Opcode       : IN     LC3b_opcode;
      RESET_L      : IN     std_logic;
      ZextSel_EX   : IN     std_logic;
      ALUMemSel_ID : OUT    std_logic;
      ALUMuxSel_ID : OUT    LC3B_4MUX_SEL;
      ALUop_ID     : OUT    LC3b_aluop;
      BaseSel_ID   : OUT    std_logic;
      Branch_ID    : OUT    std_logic;
      ImmSel_ID    : OUT    std_logic;
      JSRRSel_ID   : OUT    std_logic;
      JSRSel_ID    : OUT    std_logic;
      LDI_STI_ID   : OUT    std_logic;
      LEAMuxSel_ID : OUT    std_logic;
      Read_ID      : OUT    std_logic;
      RegWrite_ID  : OUT    std_logic;
      STRSel_ID    : OUT    std_logic;
      SetCC_ID     : OUT    std_logic;
      Write_ID     : OUT    std_logic;
      ZextSel_ID   : OUT    std_logic;
      jump_ID      : OUT    std_logic;
      opSTI_ID     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Copy_of_Reg16
   PORT (
      Input  : IN     std_logic ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Delay2ns
   PORT (
      BeforeDelay : IN     lc3b_word;
      DelayOut    : OUT    lc3b_word
   );
   END COMPONENT;
   COMPONENT Delay2ns1bit
   PORT (
      RegWrite_MEM : IN     std_logic ;
      DelayOut     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT EX_MEM
   PORT (
      ALUMemSel_EX  : IN     std_logic;
      ALUout_EX     : IN     lc3b_word;
      Branch_EX     : IN     std_logic;
      Branch_Sel    : IN     std_logic;
      DestIR_EX     : IN     lc3b_reg;
      LDI_STI_EX    : IN     std_logic;
      LatchPipeData : IN     std_logic;
      Opcode_EX     : IN     lc3b_opcode;
      PCPlus2_EX    : IN     lc3b_word;
      PC_EX         : IN     lc3b_word;
      RESET_L       : IN     std_logic;
      Read_EX       : IN     std_logic;
      RegWrite_EX   : IN     std_logic;
      STR_DATA_EX   : IN     lc3b_word;
      SetCC_EX      : IN     std_logic;
      Write_EX      : IN     std_logic;
      ZextSel_EX    : IN     std_logic;
      ZextSel_WB    : IN     std_logic;
      clk           : IN     std_logic;
      nzp_EX        : IN     lc3b_nzp;
      opSTI_EX      : IN     std_logic;
      ALUMemSel_MEM : OUT    std_logic;
      ALUout_MEM    : OUT    LC3b_word;
      Branch_MEM    : OUT    std_logic;
      DestIR_MEM    : OUT    lc3b_reg;
      LDI_STI_MEM   : OUT    std_logic;
      Opcode_MEM    : OUT    lc3b_opcode;
      PCPlus2_MEM   : OUT    lc3b_word;
      PC_MEM        : OUT    lc3b_word;
      Read_MEM      : OUT    std_logic;
      RegWrite_MEM  : OUT    std_logic;
      STR_data_MEM  : OUT    lc3b_word;
      SetCC_MEM     : OUT    std_logic;
      Write_MEM     : OUT    std_logic;
      ZextSel_MEM   : OUT    std_logic;
      nzp_mem       : OUT    lc3b_nzp;
      opSTI_MEM     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ForwardingUnit
   PORT (
      -- Declarations
      DestIR_MEM   : IN     LC3B_REG ;
      RegWrite_MEM : IN     STD_LOGIC ;
      DestIR_WB    : IN     LC3B_REG ;
      RegWrite_WB  : IN     STD_LOGIC ;
      ImmSel_EX    : IN     STD_LOGIC ;
      WRITE_EX     : IN     STD_LOGIC ;
      DestIR_EX    : IN     LC3B_REG ;
      SrcA_EX      : IN     LC3B_REG ;
      SrcB_EX      : IN     LC3B_REG ;
      Mux1Sel      : OUT    STD_LOGIC ;
      Mux2Sel      : OUT    STD_LOGIC ;
      Mux3Sel      : OUT    STD_LOGIC ;
      MuxW1Sel     : OUT    STD_LOGIC ;
      MuxW2Sel     : OUT    STD_LOGIC ;
      MuxW3Sel     : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT GenCC11
   PORT (
      writedata : IN     LC3b_word ;
      GenCCout  : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT GenR7
   PORT (
      R7destOut : OUT    Lc3b_reg 
   );
   END COMPONENT;
   COMPONENT HazardDetection
   PORT (
      Branch_Sel  : IN     std_logic;
      D_MREAD_L   : IN     std_logic;
      D_MRESP_H   : IN     std_logic;
      D_MWRITEH_L : IN     std_logic;
      D_MWRITEL_L : IN     std_logic;
      DestIR_EX   : IN     LC3B_REG;
      I_MRESP_H   : IN     std_logic;
      LDI_STI_MEM : IN     std_logic;
      RESET_L     : IN     std_logic;
      Read_EX     : IN     std_logic;
      SrcA_ID     : IN     LC3B_REG;
      SrcB_ID     : IN     LC3B_REG;
      Zextsel_WB  : IN     std_logic;
      clk         : IN     std_logic;
      latch_data  : IN     std_logic;
      opSTI_MEM   : IN     std_logic;
      NewInstr    : OUT    std_logic;
      Stall       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ID_EX
   PORT (
      ALUMemSel_ID    : IN     std_logic;
      ALUMuxSel_ID    : IN     LC3B_4MUX_SEL;
      ALUop_ID        : IN     LC3b_aluop;
      Branch_ID       : IN     std_logic;
      Branch_Sel      : IN     std_logic;
      ImmSel_ID       : IN     std_logic;
      JSRRSel_ID      : IN     std_logic;
      JSRSel_ID       : IN     std_logic;
      LDI_STI_ID      : IN     std_logic;
      LEAMuxSel_ID    : IN     std_logic;
      LatchPipeData   : IN     std_logic;
      Opcode_ID       : IN     LC3b_opcode;
      PCPlus2_ID      : IN     lc3b_word;
      PC_ID           : IN     lc3b_word;
      RESET_L         : IN     std_logic;
      Read_ID         : IN     std_logic;
      RegWrite_ID     : IN     std_logic;
      STR_data_ID     : IN     lc3b_word;
      SetCC_ID        : IN     std_logic;
      SrcA_ID         : IN     lc3b_reg;
      SrcA_data_ID    : IN     LC3b_word;
      SrcB_ID         : IN     lc3b_reg;
      SrcB_data_ID    : IN     lc3b_word;
      TrapPCout_ID    : IN     LC3b_word;
      Write_ID        : IN     std_logic;
      ZextSel_ID      : IN     std_logic;
      ZextSel_WB      : IN     std_logic;
      adj_offset11_ID : IN     LC3b_word;
      adj_offset6_ID  : IN     lc3b_word;
      adj_offset9_ID  : IN     lc3b_word;
      clk             : IN     std_logic;
      destIR_ID       : IN     lc3b_reg;
      jump_ID         : IN     std_logic;
      nzp_ID          : IN     lc3b_nzp;
      opSTI_ID        : IN     std_logic;
      sext_imm5_ID    : IN     lc3b_word;
      sext_offset6_ID : IN     lc3b_word;
      ALUMemSel_EX    : OUT    std_logic;
      ALUMuxSel_EX    : OUT    LC3B_4MUX_SEL;
      ALUop_EX        : OUT    LC3b_ALUop;
      Branch_EX       : OUT    std_logic;
      ImmSel_EX       : OUT    std_logic;
      JSRRSel_EX      : OUT    std_logic;
      JSRSel_EX       : OUT    std_logic;
      LDI_STI_EX      : OUT    std_logic;
      LEAMuxSel_EX    : OUT    std_logic;
      Opcode_EX       : OUT    lc3b_opcode;
      PCPlus2_EX      : OUT    lc3b_word;
      PC_EX           : OUT    lc3b_word;
      Read_EX         : OUT    std_logic;
      RegWrite_EX     : OUT    std_logic;
      STR_data_EX     : OUT    lc3b_word;
      SetCC_EX        : OUT    std_logic;
      SrcA_EX         : OUT    lc3b_reg;
      SrcA_data_EX    : OUT    lc3b_word;
      SrcB_EX         : OUT    lc3b_reg;
      SrcB_data_EX    : OUT    lc3b_word;
      TrapPCout_EX    : OUT    lc3b_word;
      Write_EX        : OUT    std_logic;
      ZextSel_EX      : OUT    std_logic;
      adj_imm5_EX     : OUT    lc3b_word;
      adj_offset11_EX : OUT    lc3b_word;
      adj_offset6_EX  : OUT    lc3b_word;
      adj_offset9_EX  : OUT    lc3b_word;
      destIR_EX       : OUT    lc3b_reg;
      jump_EX         : OUT    std_logic;
      nzp_EX          : OUT    lc3b_nzp;
      opSTI_EX        : OUT    std_logic;
      sext_offset6_EX : OUT    lc3b_word
   );
   END COMPONENT;
   COMPONENT IF_ID
   PORT (
      Branch_Sel : IN     std_logic;
      InstrIn    : IN     lc3b_word;
      NewInstr   : IN     std_logic;
      PCPLus2_IF : IN     lc3b_word;
      PC_IF      : IN     lc3b_word;
      RESET_L    : IN     std_logic;
      ZextSel_WB : IN     std_logic;
      clk        : IN     std_logic;
      jump_EX    : IN     std_logic;
      InstrOut   : OUT    lc3b_word;
      PCPlus2_ID : OUT    lc3b_word;
      PC_ID      : OUT    lc3b_word
   );
   END COMPONENT;
   COMPONENT MEM_WB
   PORT (
      ALUMemSel_MEM : IN     std_logic;
      ALUout_MEM    : IN     LC3b_word;
      DestIR_MEM    : IN     lc3b_reg;
      LatchPipeData : IN     std_logic;
      PCPlus2_MEM   : IN     lc3b_word;
      PC_MEM        : IN     lc3b_word;
      RESET_L       : IN     std_logic;
      RegWrite_MEM  : IN     std_logic;
      SetCC_MEM     : IN     std_logic;
      ZextSel_MEM   : IN     std_logic;
      clk           : IN     std_logic;
      dataout_MEM   : IN     lc3b_word;
      nzp_mem       : IN     lc3b_nzp;
      sti_counter   : IN     INTEGER;
      ALUMemSel_WB  : OUT    std_logic;
      ALUout_WB     : OUT    lc3b_word;
      DestIR_WB     : OUT    lc3b_reg;
      PCPlus2_WB    : OUT    lc3b_word;
      PC_WB         : OUT    lc3b_word;
      RegWrite_WB   : OUT    std_logic;
      SetCC_WB      : OUT    std_logic;
      ZextSel_WB    : OUT    std_logic;
      dataout_WB    : OUT    lc3b_word;
      nzp_wb        : OUT    lc3b_nzp
   );
   END COMPONENT;
   COMPONENT NPZCompare
   PORT (
      N          : IN     std_logic ;
      P          : IN     std_logic ;
      RegN       : IN     std_logic ;
      RegP       : IN     std_logic ;
      RegZ       : IN     std_logic ;
      Z          : IN     std_logic ;
      NZPCompOut : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZP11_c
   PORT (
      -- Declarations
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      RESET_L  : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZP_C
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      reset_l  : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit21
   PORT (
      CheckN  : OUT    std_logic ;
      CheckZ  : OUT    std_logic ;
      CheckP  : OUT    std_logic ;
      NZP_mem : IN     lc3b_nzp 
   );
   END COMPONENT;
   COMPONENT PCReg16
   PORT (
      Input    : IN     LC3b_word ;
      RESET    : IN     std_logic ;
      clk      : IN     std_logic ;
      NewInstr : IN     std_logic ;
      Output   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT P_ADJ9
   PORT (
      --clk     : IN     std_logic;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegMux2
   PORT (
      RegMuxIn1 : IN     LC3b_REG ;
      RegMuxIn2 : IN     LC3b_REG ;
      RegMuxSel : IN     std_logic ;
      dest      : OUT    LC3b_Reg 
   );
   END COMPONENT;
   COMPONENT StallUnitPC
   PORT (
      --RESET_L     : IN     std_logic;
      I_MRESP_H     : IN     std_logic ;
      D_MRESP_H     : IN     std_logic ;
      D_MREAD_L     : IN     std_logic ;
      D_MWRITEL_L   : IN     std_logic ;
      D_MWRITEH_L   : IN     std_logic ;
      opSTI_MEM     : IN     std_logic ;
      LDI_STI_MEM   : IN     std_logic ;
      Reg_input     : OUT    std_logic ;
      Reg_output    : IN     std_logic ;
      --    Latch_Data:      OUT std_logic;
      LatchPipeData : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT StallingControl
   PORT (
      CLK         : IN     STD_LOGIC ;
      D_MREAD_L   : IN     STD_LOGIC ;
      d_mresp_h   : IN     STD_LOGIC ;
      D_MWRITEH_L : IN     STD_LOGIC ;
      D_MWRITEL_L : IN     STD_LOGIC ;
      I_MREAD_L   : IN     STD_LOGIC ;
      I_MRESP_H   : IN     STD_LOGIC ;
      RESET_L     : IN     STD_LOGIC ;
      DestIR_EX   : IN     LC3B_REG ;
      Read_EX     : IN     std_logic ;
      SrcA_ID     : IN     LC3B_REG ;
      SrcB_ID     : IN     LC3B_REG ;
      ldi         : IN     STD_LOGIC ;
      sti         : IN     STD_LOGIC ;
      Opcode_ID   : IN     lc3b_opcode ;
      Opcode_Mem  : IN     LC3b_OPCODE ;
      LDISIG      : OUT    std_logic ;
      STISIG2     : OUT    std_logic ;
      STISIG      : OUT    STD_LOGIC ;
      LOAD_EXMEM  : OUT    STD_LOGIC ;
      LOAD_IDEX   : OUT    STD_LOGIC ;
      LOAD_IF     : OUT    std_logic ;
      LOAD_IFID   : OUT    STD_LOGIC ;
      LOAD_MEMWB  : OUT    STD_LOGIC 
      --      FLUSH_L          : OUT    STD_LOGIC;
      --      flush            : IN     STD_LOGIC;
      --      BR_Miss          : OUT    STD_LOGIC;
      --      Bubble           : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A       : IN     LC3b_word ;
      B       : IN     LC3b_word ;
      C       : IN     LC3b_word ;
      D       : IN     LC3b_word ;   -- := '1';
      Sel     : IN     LC3B_4MUX_SEL ;
      MUX4Out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT
   PORT (
      --clk     : IN     std_logic;
      ZEXTIn  : IN     LC3B_TRAPVECT8 ;
      ZEXTOut : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT p_ADJ5
   PORT (
      --clk     : IN     std_logic;
      Imm5    : IN     LC3B_IMM5 ;
      ADJ5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT p_ADJ6
   PORT (
      --clk     : IN     std_logic;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT p_ALU
   PORT (
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word ;
      --     ALUoutn    : OUT    std_logic;
      --      ALUoutz    : OUT    std_logic;
      --      ALUoutp    : OUT    std_logic;
      ALUMuxout : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT p_IR
   PORT (
      --Branch_ID : IN     std_logic;
      -- MDRout    : IN     LC3b_word;
      clk        : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      PCIn       : IN     LC3b_word ;
      datain     : IN     LC3b_word ;
      jump_EX    : IN     std_logic ;
      ZextSel_WB : IN     std_logic ;
      Branch_Sel : IN     std_logic ;
      --     MRESP_H   : IN      std_logic;
      MemREAD_L  : OUT    std_logic ;
      --FETCH     : OUT     std_logic;
      InstrOut   : OUT    lc3b_word ;
      PCOut      : OUT    LC3b_word ;
      MemResp_H  : IN     std_logic ;
      --address   : OUT     LC3B_WORD;
      ADDR       : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT p_Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      --clk        : IN     std_logic;
      PCPlus2out : OUT    LC3b_word  -- PCPlus2out
   );
   END COMPONENT;
   COMPONENT p_RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      destIR      : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      RFDout      : OUT    LC3b_word ;
      dest        : IN     LC3b_reg ;
      WriteData   : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT p_SEXT6
   PORT (
      --clk      : IN     std_logic;
      offset6  : IN     LC3b_index6 ;
      SEXT6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT p_datamemory
   PORT (
      clk         : IN     std_logic ;
      RESET_L     : IN     std_logic ;
      ALUOUtMem   : IN     LC3b_word ;
      datain      : IN     LC3b_word ;
      MRESP_H     : IN     std_logic ;
      Read_MEM    : IN     std_logic ;
      Write_MEM   : IN     std_logic ;
      OPcode      : IN     lc3b_opcode ;
      STR_data    : IN     LC3b_word ;
      MREAD_L     : OUT    std_logic ;
      MWRITEH_L   : OUT    std_logic ;
      MWRITEL_L   : OUT    std_logic ;
      dataout     : OUT    LC3b_word ;
      DataRead    : OUT    LC3b_word ;
      sti_flag    : OUT    std_logic ;
      sti_counter : OUT    INTEGER ;
      address     : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT ADD16
   PORT (
      A : IN     LC3B_WORD ;
      B : IN     LC3B_WORD ;
      F : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADD16 USE ENTITY mp3lib.ADD16;
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : BlockBreaker1 USE ENTITY ece411.BlockBreaker1;
   FOR ALL : ControlROM USE ENTITY ece411.ControlROM;
   FOR ALL : Copy_of_Reg16 USE ENTITY ece411.Copy_of_Reg16;
   FOR ALL : Delay2ns USE ENTITY ece411.Delay2ns;
   FOR ALL : Delay2ns1bit USE ENTITY ece411.Delay2ns1bit;
   FOR ALL : EX_MEM USE ENTITY ece411.EX_MEM;
   FOR ALL : ForwardingUnit USE ENTITY ece411.ForwardingUnit;
   FOR ALL : GenCC11 USE ENTITY ece411.GenCC11;
   FOR ALL : GenR7 USE ENTITY ece411.GenR7;
   FOR ALL : HazardDetection USE ENTITY ece411.HazardDetection;
   FOR ALL : ID_EX USE ENTITY ece411.ID_EX;
   FOR ALL : IF_ID USE ENTITY ece411.IF_ID;
   FOR ALL : MEM_WB USE ENTITY ece411.MEM_WB;
   FOR ALL : NPZCompare USE ENTITY ece411.NPZCompare;
   FOR ALL : NZP11_c USE ENTITY ece411.NZP11_c;
   FOR ALL : NZP_C USE ENTITY ece411.NZP_C;
   FOR ALL : NZPsplit21 USE ENTITY ece411.NZPsplit21;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : PCReg16 USE ENTITY ece411.PCReg16;
   FOR ALL : P_ADJ9 USE ENTITY ece411.P_ADJ9;
   FOR ALL : RegMux2 USE ENTITY ece411.RegMux2;
   FOR ALL : StallUnitPC USE ENTITY ece411.StallUnitPC;
   FOR ALL : StallingControl USE ENTITY ece411.StallingControl;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT USE ENTITY ece411.ZEXT;
   FOR ALL : p_ADJ5 USE ENTITY ece411.p_ADJ5;
   FOR ALL : p_ADJ6 USE ENTITY ece411.p_ADJ6;
   FOR ALL : p_ALU USE ENTITY ece411.p_ALU;
   FOR ALL : p_IR USE ENTITY ece411.p_IR;
   FOR ALL : p_Plus2 USE ENTITY ece411.p_Plus2;
   FOR ALL : p_RegFile USE ENTITY ece411.p_RegFile;
   FOR ALL : p_SEXT6 USE ENTITY ece411.p_SEXT6;
   FOR ALL : p_datamemory USE ENTITY ece411.p_datamemory;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1 
   aRegip <= '1';  
                                      


   -- Instance port mappings.
   U_16 : ADJ11
      PORT MAP (
         input    => offset11,
         ADJ11out => ADJ11out
      );
   aBlockBreaker : BlockBreaker1
      PORT MAP (
         InstrIn    => InstrIN,
         Opcode     => Opcode,
         destIR     => destIR,
         SrcA       => SrcA,
         clk        => clk,
         SrcB       => SrcB,
         Bit4       => Bit4,
         Bit5       => Bit5,
         JSR_RBit11 => JSR_RBit11,
         ImmValue4  => ImmValue4,
         nzp_ID     => nzp_ID,
         index6     => index6,
         offset9    => offset9,
         offset11   => offset11,
         TrapVec8   => TrapVec8,
         ImmValue5  => ImmValue5
      );
   a_ControlRom : ControlROM
      PORT MAP (
         RESET_L      => RESET_L,
         Clk          => clk,
         Opcode       => Opcode,
         Bit4         => Bit4,
         Bit5         => Bit5,
         JSR_RBit11   => JSR_RBit11,
         ZextSel_EX   => ZextSel_EX,
         STRSel_ID    => STRSel_ID,
         ImmSel_ID    => ImmSel_ID,
         BaseSel_ID   => OPEN,
         JSRRSel_ID   => JSRRSel_ID,
         ALUop_ID     => ALUOP_ID,
         Branch_ID    => Branch_ID,
         Write_ID     => Write_ID,
         Read_ID      => Read_ID,
         RegWrite_ID  => RegWrite_ID,
         ALUMuxSel_ID => ALUMuxSel_ID,
         ALUMemSel_ID => ALUMemSel_ID,
         SetCC_ID     => SetCC_ID,
         LEAMuxSel_ID => LEAMuxSel_ID,
         LDI_STI_ID   => LDI_STI_ID,
         opSTI_ID     => opSTI_ID,
         jump_ID      => jump_ID,
         JSRSel_ID    => JSRSel_ID,
         ZextSel_ID   => ZextSel_ID
      );
   U_2 : Copy_of_Reg16
      PORT MAP (
         Input  => Reg_input,
         RESET  => RESET_L,
         clk    => clk,
         load   => aRegip,
         Output => Output
      );
   U_1 : Delay2ns
      PORT MAP (
         DelayOut    => RFAout1,
         BeforeDelay => BeforeDelay
      );
   U_7 : Delay2ns1bit
      PORT MAP (
         RegWrite_MEM => RegWrite_MEM,
         DelayOut     => DelayOut
      );
   aEX_MEM : EX_MEM
      PORT MAP (
         ALUMemSel_EX  => ALUMemSel_EX,
         ALUout_EX     => ALUOut,
         Branch_EX     => branch_ex,
         DestIR_EX     => DestIR_EX,
         Opcode_EX     => Opcode_EX,
         RESET_L       => RESET_L,
         Read_EX       => Read_EX,
         RegWrite_EX   => RegWrite_EX,
         SetCC_EX      => SetCC_EX,
         Write_EX      => WRITE_EX,
         PC_EX         => PC_EX,
         PCPlus2_EX    => PCPlus2_EX,
         clk           => clk,
         nzp_EX        => nzp_EX,
         Branch_Sel    => Branch_Sel,
         ZextSel_EX    => ZextSel_EX,
         ALUMemSel_MEM => ALUMemSel_MEM,
         ALUout_MEM    => Aluout_mem,
         Branch_MEM    => Branch_mem,
         DestIR_MEM    => DestIR_MEM,
         Opcode_MEM    => Opcode_MEM,
         Read_MEM      => Read_MEM,
         RegWrite_MEM  => RegWrite_MEM,
         STR_data_MEM  => STR_data_MEM,
         SetCC_MEM     => SETCC_MEM,
         Write_MEM     => Write_MEM,
         nzp_mem       => NZP_mem,
         STR_DATA_EX   => str_data_ex_fu,
         LatchPipeData => LOAD_EXMEM,
         LDI_STI_EX    => LDI_STI_EX,
         opSTI_EX      => opSTI_EX,
         LDI_STI_MEM   => LDI_STI_MEM,
         opSTI_MEM     => opSTI_MEM,
         PC_MEM        => PC_MEM,
         PCPlus2_MEM   => PCPlus2_MEM,
         ZextSel_MEM   => ZextSel_MEM,
         ZextSel_WB    => ZextSel_WB
      );
   aFU : ForwardingUnit
      PORT MAP (
         DestIR_MEM   => DestIR_MEM,
         RegWrite_MEM => DelayOut,
         DestIR_WB    => DestIR_WB,
         RegWrite_WB  => RegWrite_WB,
         ImmSel_EX    => ImmSel_EX,
         WRITE_EX     => WRITE_EX,
         DestIR_EX    => DestIR_EX,
         SrcA_EX      => SrcA_EX,
         SrcB_EX      => SrcB_EX,
         Mux1Sel      => mux1Sel,
         Mux2Sel      => mux2Sel,
         Mux3Sel      => mux3Sel,
         MuxW1Sel     => muxw1Sel,
         MuxW2Sel     => muxw2Sel,
         MuxW3Sel     => muxw3Sel
      );
   aGenCC : GenCC11
      PORT MAP (
         writedata => writedata,
         GenCCout  => GenCCout
      );
   U_30 : GenR7
      PORT MAP (
         R7destOut => R7destOut
      );
   aHazarddEtection : HazardDetection
      PORT MAP (
         clk         => clk,
         RESET_L     => RESET_L,
         Read_EX     => Read_EX,
         SrcB_ID     => SrcB,
         SrcA_ID     => SrcA,
         DestIR_EX   => DestIR_EX,
         I_MRESP_H   => I_MRESP_H,
         D_MRESP_H   => D_MRESP_H,
         D_MREAD_L   => D_MREAD_L_internal,
         D_MWRITEL_L => D_MWRITEL_L_internal,
         D_MWRITEH_L => D_MWRITEH_L_internal,
         opSTI_MEM   => opSTI_MEM,
         LDI_STI_MEM => LDI_STI_MEM,
         Branch_Sel  => Branch_Sel,
         Zextsel_WB  => ZextSel_WB,
         latch_data  => latch_data,
         Stall       => stall,
         NewInstr    => newinstr
      );
   aID_EX : ID_EX
      PORT MAP (
         ALUMuxSel_ID    => ALUMuxSel_ID,
         ALUMemSel_ID    => ALUMemSel_ID,
         ALUop_ID        => ALUOP_ID,
         JSRSel_ID       => JSRSel_ID,
         Branch_ID       => Branch_ID,
         JSRRSel_ID      => JSRRSel_ID,
         PC_ID           => PC_ID,
         PCPlus2_ID      => PCPlus2_ID,
         RESET_L         => RESET_L,
         Read_ID         => Read_ID,
         RegWrite_ID     => RegWrite_ID,
         SrcA_data_ID    => RFAOut,
         SrcB_data_ID    => RFBout,
         STR_data_ID     => RFDout,
         SetCC_ID        => SetCC_ID,
         ImmSel_ID       => ImmSel_ID,
         Write_ID        => Write_ID,
         adj_offset6_ID  => adj_offset6_ID,
         adj_offset9_ID  => ADJ9out,
         clk             => clk,
         nzp_ID          => nzp_ID,
         sext_imm5_ID    => ADJ5out,
         sext_offset6_ID => sext_offset6_ID,
         adj_offset11_ID => ADJ11out,
         Opcode_ID       => Opcode,
         SrcA_ID         => SrcA,
         SrcB_ID         => SrcB,
         LatchPipeData   => LOAD_IDEX,
         LEAMuxSel_ID    => LEAMuxSel_ID,
         Branch_Sel      => Branch_Sel,
         LDI_STI_ID      => LDI_STI_ID,
         opSTI_ID        => opSTI_ID,
         destIR_ID       => destIR,
         jump_ID         => jump_ID,
         TrapPCout_ID    => TrapPCout,
         ZextSel_ID      => ZextSel_ID,
         ZextSel_WB      => ZextSel_WB,
         ALUMuxSel_EX    => ALUMuxSel_EX,
         ALUMemSel_EX    => ALUMemSel_EX,
         ALUop_EX        => ALUop_EX,
         Branch_EX       => branch_ex,
         destIR_EX       => destIR_EX1,
         JSRRSel_EX      => jsrrsel_ex,
         PC_EX           => PC_EX1,
         PCPlus2_EX      => PCPlus2_EX,
         Read_EX         => Read_EX,
         RegWrite_EX     => RegWrite_EX,
         SrcA_data_EX    => srca_data_ex,
         SrcB_data_EX    => SRCB_DATA_EX,
         STR_data_EX     => str_data_ex,
         SetCC_EX        => SetCC_EX,
         ImmSel_EX       => ImmSel_EX,
         Write_EX        => WRITE_EX,
         adj_imm5_EX     => adj_imm5_EX,
         adj_offset6_EX  => adj_offset6_EX,
         adj_offset9_EX  => adj_offset9_EX,
         adj_offset11_EX => adj_offset11_EX,
         nzp_EX          => nzp_EX,
         sext_offset6_EX => sext_offset6_EX,
         Opcode_EX       => Opcode_EX,
         SrcA_EX         => SrcA_EX,
         SrcB_EX         => SrcB_EX,
         LEAMuxSel_EX    => leamuxsel_ex,
         LDI_STI_EX      => LDI_STI_EX,
         opSTI_EX        => opSTI_EX,
         JSRSel_EX       => JSRSel_EX,
         jump_EX         => jump_EX,
         TrapPCout_EX    => TrapPCout_EX,
         ZextSel_EX      => ZextSel_EX
      );
   aIF_ID : IF_ID
      PORT MAP (
         clk        => clk,
         RESET_L    => RESET_L,
         InstrIn    => InstrOut,
         PC_IF      => PCOut,
         PCPLus2_IF => PCPlus2,
         NewInstr   => LOAD_IFID,
         jump_EX    => jump_EX,
         ZextSel_WB => ZextSel_WB,
         Branch_Sel => Branch_Sel,
         PCPlus2_ID => PCPlus2_ID,
         PC_ID      => PC_ID,
         InstrOut   => InstrIN
      );
   aMEM_WB : MEM_WB
      PORT MAP (
         ALUMemSel_MEM => ALUMemSel_MEM,
         ALUout_MEM    => Aluout_mem,
         DestIR_MEM    => DestIR_MEM,
         RESET_L       => RESET_L,
         RegWrite_MEM  => RegWrite_MEM,
         sti_counter   => sti_counter,
         SetCC_MEM     => SETCC_MEM,
         clk           => clk,
         PC_MEM        => PC_MEM,
         PCPlus2_MEM   => PCPlus2_MEM,
         dataout_MEM   => DataRead,
         LatchPipeData => LOAD_MEMWB,
         nzp_mem       => NZP_mem,
         ALUMemSel_WB  => ALUMemSel_WB,
         ALUout_WB     => ALUout_WB,
         DestIR_WB     => DestIR_WB,
         RegWrite_WB   => RegWrite_WB,
         SetCC_WB      => setcc_wb,
         PC_WB         => PC_WB,
         PCPlus2_WB    => OPEN,
         dataout_WB    => dataout_WB,
         nzp_wb        => NZP_WB,
         ZextSel_MEM   => ZextSel_MEM,
         ZextSel_WB    => ZextSel_WB
      );
   U_5 : NPZCompare
      PORT MAP (
         N          => n2,
         P          => p2,
         RegN       => n1,
         RegP       => p1,
         RegZ       => z1,
         Z          => z2,
         NZPCompOut => NZPCompOut
      );
   U_23 : NZP11_c
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => setcc_wb,
         clk      => clk,
         RESET_L  => RESET_L,
         n        => n,
         p        => p,
         z        => z
      );
   U_3 : NZP_C
      PORT MAP (
         GenCCout => GenCCout1,
         LoadNZP  => setcc_wb,
         reset_l  => RESET_L,
         n        => n2,
         p        => p2,
         z        => z2
      );
   U_4 : NZP_C
      PORT MAP (
         GenCCout => NZP_mem,
         LoadNZP  => SETCC_MEM,
         reset_l  => RESET_L,
         n        => n1,
         p        => p1,
         z        => z1
      );
   aNZPslipt : NZPsplit21
      PORT MAP (
         CheckN  => CheckN,
         CheckZ  => CheckZ,
         CheckP  => CheckP,
         NZP_mem => NZP_mem
      );
   aPCReg16 : PCReg16
      PORT MAP (
         Input    => Input,
         RESET    => RESET_L,
         clk      => clk,
         NewInstr => LOAD_IF,
         Output   => PC
      );
   U_25 : P_ADJ9
      PORT MAP (
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   U_29 : RegMux2
      PORT MAP (
         RegMuxIn1 => destIR_EX1,
         RegMuxIn2 => R7destOut,
         RegMuxSel => ZextSel_EX,
         dest      => DestIR_EX
      );
   U_37 : StallUnitPC
      PORT MAP (
         I_MRESP_H     => I_MRESP_H,
         D_MRESP_H     => D_MRESP_H,
         D_MREAD_L     => D_MREAD_L_internal,
         D_MWRITEL_L   => D_MWRITEL_L_internal,
         D_MWRITEH_L   => D_MWRITEH_L_internal,
         opSTI_MEM     => opSTI_MEM,
         LDI_STI_MEM   => LDI_STI_MEM,
         Reg_input     => Reg_input,
         Reg_output    => Output,
         LatchPipeData => latch_data
      );
   U_38 : StallingControl
      PORT MAP (
         CLK         => clk,
         D_MREAD_L   => D_MREAD_L_internal,
         d_mresp_h   => D_MRESP_H,
         D_MWRITEH_L => D_MWRITEH_L_internal,
         D_MWRITEL_L => D_MWRITEL_L_internal,
         I_MREAD_L   => I_MREAD_L_internal,
         I_MRESP_H   => I_MRESP_H,
         RESET_L     => RESET_L,
         DestIR_EX   => DestIR_EX,
         Read_EX     => Read_EX,
         SrcA_ID     => SrcA,
         SrcB_ID     => SrcB,
         ldi         => ldi,
         sti         => sti,
         Opcode_ID   => Opcode_ID,
         Opcode_Mem  => Opcode_MEM,
         LDISIG      => LDISIG,
         STISIG2     => STISIG2,
         STISIG      => STISIG,
         LOAD_EXMEM  => LOAD_EXMEM,
         LOAD_IDEX   => LOAD_IDEX,
         LOAD_IF     => LOAD_IF,
         LOAD_IFID   => LOAD_IFID,
         LOAD_MEMWB  => LOAD_MEMWB
      );
   U_12 : WordMux2
      PORT MAP (
         A   => Aluout_mem,
         B   => writedata,
         Sel => muxw1Sel,
         F   => F6
      );
   U_13 : WordMux2
      PORT MAP (
         A   => srca_data_ex,
         B   => F6,
         Sel => mux1Sel,
         F   => SrcA_FU
      );
   U_14 : WordMux2
      PORT MAP (
         A   => Aluout_mem,
         B   => writedata,
         Sel => muxw2Sel,
         F   => B4
      );
   U_15 : WordMux2
      PORT MAP (
         A   => SRCB_DATA_EX,
         B   => B4,
         Sel => mux2Sel,
         F   => SRCB_FU
      );
   U_17 : WordMux2
      PORT MAP (
         A   => MUX4Out1,
         B   => adj_offset9_EX,
         Sel => leamuxsel_ex,
         F   => F
      );
   U_18 : WordMux2
      PORT MAP (
         A   => SrcA_FU,
         B   => PCPlus2_EX,
         Sel => leamuxsel_ex,
         F   => BeforeDelay
      );
   U_24 : WordMux2
      PORT MAP (
         A   => Aluout_mem,
         B   => writedata,
         Sel => muxw3Sel,
         F   => F5
      );
   U_26 : WordMux2
      PORT MAP (
         A   => BranchSelPC,
         B   => Aluout_mem,
         Sel => jump_EX,
         F   => JumpSelPC
      );
   U_28 : WordMux2
      PORT MAP (
         A   => JumpSelPC,
         B   => WriteData1,
         Sel => ZextSel_WB,
         F   => F4
      );
   U_31 : WordMux2
      PORT MAP (
         A   => PC_EX1,
         B   => TrapPCout_EX,
         Sel => ZextSel_EX,
         F   => PC_EX
      );
   U_32 : WordMux2
      PORT MAP (
         A   => WriteData1,
         B   => PC_WB,
         Sel => ZextSel_WB,
         F   => writedata
      );
   U_33 : WordMux2
      PORT MAP (
         A   => Aluout_mem,
         B   => PC_MEM,
         Sel => ZextSel_MEM,
         F   => ALUorTRAPPC
      );
   U_34 : WordMux2
      PORT MAP (
         A   => srca_data_ex,
         B   => B,
         Sel => jsrrsel_ex,
         F   => B1
      );
   U_35 : WordMux2
      PORT MAP (
         A   => F4,
         B   => B1,
         Sel => JSRSel_EX,
         F   => Input
      );
   U_36 : WordMux2
      PORT MAP (
         A   => str_data_ex,
         B   => F5,
         Sel => mux3Sel,
         F   => str_data_ex_fu
      );
   aPCMux : WordMux2
      PORT MAP (
         A   => PCPlus2,
         B   => Aluout_mem,
         Sel => Branch_Sel,
         F   => BranchSelPC
      );
   aWordMux2 : WordMux2
      PORT MAP (
         A   => ALUout_WB,
         B   => dataout_WB,
         Sel => ALUMemSel_WB,
         F   => WriteData1
      );
   U_11 : WordMux4
      PORT MAP (
         A       => SRCB_FU,
         B       => adj_imm5_EX,
         C       => adj_offset6_EX,
         D       => sext_offset6_EX,
         Sel     => ALUMuxSel_EX,
         MUX4Out => MUX4Out1
      );
   U_27 : ZEXT
      PORT MAP (
         ZEXTIn  => TrapVec8,
         ZEXTOut => TrapPCout
      );
   U_8 : p_ADJ5
      PORT MAP (
         Imm5    => ImmValue5,
         ADJ5out => ADJ5out
      );
   U_9 : p_ADJ6
      PORT MAP (
         index6  => index6,
         ADJ6out => adj_offset6_ID
      );
   a_ALU : p_ALU
      PORT MAP (
         ALUop     => ALUop_EX,
         RFAout    => RFAout1,
         clk       => clk,
         ALUout    => ALUOut,
         ALUMuxout => F
      );
   aIR : p_IR
      PORT MAP (
         clk        => clk,
         RESET_L    => RESET_L,
         PCIn       => PC,
         datain     => i_datain,
         jump_EX    => jump_EX,
         ZextSel_WB => ZextSel_WB,
         Branch_Sel => Branch_Sel,
         MemREAD_L  => I_MREAD_L_internal,
         InstrOut   => InstrOut,
         PCOut      => PCOut,
         MemResp_H  => I_MRESP_H,
         ADDR       => I_address
      );
   aPCPlus2 : p_Plus2
      PORT MAP (
         PCout      => PC,
         PCPlus2out => PCPlus2
      );
   a_regfile : p_RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RegWrite    => RegWrite_WB,
         SrcB        => SrcB,
         destIR      => destIR,
         StoreMuxout => SrcA,
         clk         => clk,
         RFAout      => RFAOut,
         RFBout      => RFBout,
         RFDout      => RFDout,
         dest        => DestIR_WB,
         WriteData   => writedata
      );
   U_10 : p_SEXT6
      PORT MAP (
         offset6  => index6,
         SEXT6out => sext_offset6_ID
      );
   a_datamemory : p_datamemory
      PORT MAP (
         clk         => clk,
         RESET_L     => RESET_L,
         ALUOUtMem   => ALUorTRAPPC,
         datain      => d_datain,
         MRESP_H     => D_MRESP_H,
         Read_MEM    => Read_MEM,
         Write_MEM   => Write_MEM,
         OPcode      => Opcode_MEM,
         STR_data    => STR_data_MEM,
         MREAD_L     => D_MREAD_L_internal,
         MWRITEH_L   => D_MWRITEH_L_internal,
         MWRITEL_L   => D_MWRITEL_L_internal,
         dataout     => D_dataout,
         DataRead    => DataRead,
         sti_flag    => Sel,
         sti_counter => sti_counter,
         address     => d_address
      );
   U_0 : ADD16
      PORT MAP (
         A => PCPlus2_EX,
         B => adj_offset11_EX,
         F => B
      );
   U_6 : AND2
      PORT MAP (
         A => Branch_mem,
         B => NZPCompOut,
         F => Branch_Sel2
      );
   U_19 : AND3
      PORT MAP (
         A => Branch_mem,
         B => n,
         C => CheckN,
         F => F1
      );
   U_20 : AND3
      PORT MAP (
         A => Branch_mem,
         B => p,
         C => CheckP,
         F => F2
      );
   U_21 : AND3
      PORT MAP (
         A => Branch_mem,
         B => z,
         C => CheckZ,
         F => F3
      );
   U_22 : OR3
      PORT MAP (
         A => F1,
         B => F2,
         C => F3,
         F => Branch_Sel
      );

   -- Implicit buffered output assignments
   D_MREAD_L   <= D_MREAD_L_internal;
   D_MWRITEH_L <= D_MWRITEH_L_internal;
   D_MWRITEL_L <= D_MWRITEL_L_internal;
   I_MREAD_L   <= I_MREAD_L_internal;

END struct;
