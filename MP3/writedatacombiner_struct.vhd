-- VHDL Entity ece411.WriteDataCombiner.symbol
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 14:22:47 07/25/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY WriteDataCombiner IS
   PORT( 
      DATAOUT    : IN     LC3b_WORD;
      MWRITEH_L  : IN     std_logic;
      MWRITEL_L  : IN     std_logic;
      OffSelOut  : IN     LC3b_CC;
      WayDIN     : IN     LC3b_OWORD;
      WWCDataOut : OUT    LC3b_OWORD
   );

-- Declarations

END WriteDataCombiner ;

--
-- VHDL Architecture ece411.WriteDataCombiner.struct
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 14:22:47 07/25/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY mp3lib;

ARCHITECTURE struct OF WriteDataCombiner IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DOut0       : std_logic;
   SIGNAL DOut1       : std_logic;
   SIGNAL DOut2       : std_logic;
   SIGNAL DOut3       : std_logic;
   SIGNAL DOut4       : std_logic;
   SIGNAL DOut5       : std_logic;
   SIGNAL DOut6       : std_logic;
   SIGNAL DOut7       : std_logic;
   SIGNAL DecoderOut8 : LC3B_BYTE;
   SIGNAL In0         : LC3b_word;
   SIGNAL In1         : LC3b_word;
   SIGNAL In2         : LC3b_word;
   SIGNAL In3         : LC3b_word;
   SIGNAL In4         : LC3b_word;
   SIGNAL In5         : LC3b_word;
   SIGNAL In6         : LC3b_word;
   SIGNAL In7         : LC3b_word;
   SIGNAL Out0        : LC3b_word;
   SIGNAL Out1        : LC3b_word;
   SIGNAL Out2        : LC3b_word;
   SIGNAL Out3        : LC3b_word;
   SIGNAL Out4        : LC3b_word;
   SIGNAL Out5        : LC3b_word;
   SIGNAL Out6        : LC3b_word;
   SIGNAL Out7        : LC3b_word;


   -- Component Declarations
   COMPONENT Decoder8bits
   PORT (
      Input : IN     LC3b_byte ;
      DOut0 : OUT    std_logic ;
      DOut1 : OUT    std_logic ;
      DOut2 : OUT    std_logic ;
      DOut3 : OUT    std_logic ;
      DOut4 : OUT    std_logic ;
      DOut5 : OUT    std_logic ;
      DOut6 : OUT    std_logic ;
      DOut7 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordFrom8x16
   PORT (
      In0      : IN     LC3b_word ;
      In1      : IN     LC3b_word ;
      In2      : IN     LC3b_word ;
      In3      : IN     LC3b_word ;
      In4      : IN     LC3b_word ;
      In5      : IN     LC3b_word ;
      In6      : IN     LC3b_word ;
      In7      : IN     LC3b_word ;
      OWordOut : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT OWordTo8x16
   PORT (
      Input : IN     LC3b_oword ;
      Out0  : OUT    LC3b_word ;
      Out1  : OUT    LC3b_word ;
      Out2  : OUT    LC3b_word ;
      Out3  : OUT    LC3b_word ;
      Out4  : OUT    LC3b_word ;
      Out5  : OUT    LC3b_word ;
      Out6  : OUT    LC3b_word ;
      Out7  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WriteToCache
   PORT (
      DATAOUT   : IN     LC3b_WORD ;
      DOut0     : IN     std_logic ;
      DOut1     : IN     std_logic ;
      DOut2     : IN     std_logic ;
      DOut3     : IN     std_logic ;
      DOut4     : IN     std_logic ;
      DOut5     : IN     std_logic ;
      DOut6     : IN     std_logic ;
      DOut7     : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      Out0      : IN     LC3b_word ;
      Out1      : IN     LC3b_word ;
      Out2      : IN     LC3b_word ;
      Out3      : IN     LC3b_word ;
      Out4      : IN     LC3b_word ;
      Out5      : IN     LC3b_word ;
      Out6      : IN     LC3b_word ;
      Out7      : IN     LC3b_word ;
      In0       : OUT    LC3b_word ;
      In1       : OUT    LC3b_word ;
      In2       : OUT    LC3b_word ;
      In3       : OUT    LC3b_word ;
      In4       : OUT    LC3b_word ;
      In5       : OUT    LC3b_word ;
      In6       : OUT    LC3b_word ;
      In7       : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT DECODE3_8
   PORT (
      A : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F : OUT    LC3B_BYTE 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : DECODE3_8 USE ENTITY mp3lib.DECODE3_8;
   FOR ALL : Decoder8bits USE ENTITY ece411.Decoder8bits;
   FOR ALL : OWordFrom8x16 USE ENTITY ece411.OWordFrom8x16;
   FOR ALL : OWordTo8x16 USE ENTITY ece411.OWordTo8x16;
   FOR ALL : WriteToCache USE ENTITY ece411.WriteToCache;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : Decoder8bits
      PORT MAP (
         Input => DecoderOut8,
         DOut0 => DOut0,
         DOut1 => DOut1,
         DOut2 => DOut2,
         DOut3 => DOut3,
         DOut4 => DOut4,
         DOut5 => DOut5,
         DOut6 => DOut6,
         DOut7 => DOut7
      );
   U_3 : OWordFrom8x16
      PORT MAP (
         In0      => In0,
         In1      => In1,
         In2      => In2,
         In3      => In3,
         In4      => In4,
         In5      => In5,
         In6      => In6,
         In7      => In7,
         OWordOut => WWCDataOut
      );
   U_2 : OWordTo8x16
      PORT MAP (
         Input => WayDIN,
         Out0  => Out0,
         Out1  => Out1,
         Out2  => Out2,
         Out3  => Out3,
         Out4  => Out4,
         Out5  => Out5,
         Out6  => Out6,
         Out7  => Out7
      );
   aCacheWrite : WriteToCache
      PORT MAP (
         DATAOUT   => DATAOUT,
         DOut0     => DOut0,
         DOut1     => DOut1,
         DOut2     => DOut2,
         DOut3     => DOut3,
         DOut4     => DOut4,
         DOut5     => DOut5,
         DOut6     => DOut6,
         DOut7     => DOut7,
         MWRITEH_L => MWRITEH_L,
         MWRITEL_L => MWRITEL_L,
         Out0      => Out0,
         Out1      => Out1,
         Out2      => Out2,
         Out3      => Out3,
         Out4      => Out4,
         Out5      => Out5,
         Out6      => Out6,
         Out7      => Out7,
         In0       => In0,
         In1       => In1,
         In2       => In2,
         In3       => In3,
         In4       => In4,
         In5       => In5,
         In6       => In6,
         In7       => In7
      );
   U_0 : DECODE3_8
      PORT MAP (
         A => OffSelOut,
         F => DecoderOut8
      );

END struct;
