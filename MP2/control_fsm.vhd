-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 15:17:58 06/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      CheckN         : IN     std_logic;
      CheckP         : IN     std_logic;
      CheckZ         : IN     std_logic;
      JSR_R          : IN     std_logic;
      MRESP_H        : IN     std_logic;
      OpImmBit       : IN     std_logic;
      Opcode         : IN     LC3b_opcode;
      RESET_L        : IN     std_logic;
      START_H        : IN     std_logic;
      ShiftAD        : IN     LC3B_SHFTOP;
      clk            : IN     std_logic;
      n              : IN     std_logic;
      p              : IN     std_logic;
      z              : IN     std_logic;
      ALUMuxSel      : OUT    std_logic;
      ALUop          : OUT    LC3b_aluop;
      LBD_STBMux2Sel : OUT    std_logic;
      LDB_STBMuxSel  : OUT    std_logic;
      LEAMuxSel      : OUT    std_logic;
      LoadIR         : OUT    std_logic;
      LoadMAR        : OUT    std_logic;
      LoadMDR        : OUT    std_logic;
      LoadNZP        : OUT    std_logic;
      LoadPC         : OUT    std_logic;
      MARMuxSel      : OUT    std_logic;
      MDRMuxSel      : OUT    std_logic;
      MREAD_L        : OUT    std_logic;
      MWRITEH_L      : OUT    std_logic;
      MWRITEL_L      : OUT    std_logic;
      PCMuxSel       : OUT    LC3B_4MUX_SEL;
      RFMuxSel       : OUT    std_logic;
      RegMuxSel      : OUT    std_logic;       -- RegMuxSel
      RegWrite       : OUT    std_logic;
      ShiftOpSel     : OUT    std_logic;
      StoreSR        : OUT    std_logic;
      Trap_JSRMuxSel : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 15:17:59 06/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      ADD,
      L_AND,
      Decode,
      BR1,
      BR2,
      L_NOT,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      ST2,
      LD1,
      LD2,
      JMP_RET,
      LEA,
      JSR2,
      JSRR2,
      SHFT_SLL,
      SHFT_SRL,
      SHFT_SRA,
      TRAP1,
      TRAP2,
      TRAP3,
      JSR1,
      JSRR3,
      TRAP0,
      CalcADDR1,
      LDI1,
      STI1,
      LDI4,
      STI4,
      LDI2,
      STI2,
      STI3,
      LDI3,
      CalcADDRB,
      LDB1,
      STB1,
      LDB2,
      STB2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CheckN,
      CheckP,
      CheckZ,
      JSR_R,
      MRESP_H,
      Opcode,
      START_H,
      ShiftAD,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN ADD => 
            next_state <= IF1;
         WHEN L_AND => 
            next_state <= IF1;
         WHEN Decode => 
            IF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_ldr) OR (Opcode = op_str)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF (Opcode = op_and) THEN 
               next_state <= L_AND;
            ELSIF ((Opcode = op_add)) THEN 
               next_state <= ADD;
            ELSIF ((Opcode = op_jmp) OR (Opcode = op_ret)) THEN 
               next_state <= JMP_RET;
            ELSIF (Opcode = OP_LEA) THEN 
               next_state <= LEA;
            ELSIF ((Opcode = OP_JSR) AND (JSR_R = '1')) THEN 
               next_state <= JSR1;
            ELSIF ((Opcode = OP_JSR) AND (JSR_R = '0')) THEN 
               next_state <= JSRR3;
            ELSIF ((Opcode = OP_SHF) AND (ShiftAD = "01")) THEN 
               next_state <= SHFT_SRL;
            ELSIF ((Opcode = OP_SHF) AND (ShiftAD = "10" OR ShiftAD = "00")) THEN 
               next_state <= SHFT_SLL;
            ELSIF ((Opcode = OP_SHF) AND (ShiftAD = "11")) THEN 
               next_state <= SHFT_SRA;
            ELSIF (Opcode = op_trap) THEN 
               next_state <= TRAP0;
            ELSIF (Opcode = op_ldi OR Opcode = op_sti) THEN 
               next_state <= CalcADDR1;
            ELSIF (Opcode = op_ldb OR Opcode = op_stb) THEN 
               next_state <= CalcADDRB;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR1 => 
            IF (((n AND CheckN) OR (p AND CheckP) OR (z AND CheckZ)) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H='1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSE
               next_state <= CalcADDR;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN JMP_RET => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN JSR2 => 
            next_state <= IF1;
         WHEN JSRR2 => 
            next_state <= IF1;
         WHEN SHFT_SLL => 
            next_state <= IF1;
         WHEN SHFT_SRL => 
            next_state <= IF1;
         WHEN SHFT_SRA => 
            next_state <= IF1;
         WHEN TRAP1 => 
            next_state <= TRAP2;
         WHEN TRAP2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= TRAP3;
            ELSE
               next_state <= TRAP2;
            END IF;
         WHEN TRAP3 => 
            next_state <= IF1;
         WHEN JSR1 => 
            next_state <= JSR2;
         WHEN JSRR3 => 
            next_state <= JSRR2;
         WHEN TRAP0 => 
            next_state <= TRAP1;
         WHEN CalcADDR1 => 
            IF (Opcode = op_ldi) THEN 
               next_state <= LDI1;
            ELSIF (Opcode = op_sti) THEN 
               next_state <= STI1;
            ELSE
               next_state <= CalcADDR1;
            END IF;
         WHEN LDI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI2;
            ELSE
               next_state <= LDI1;
            END IF;
         WHEN STI1 => 
            next_state <= STI2;
         WHEN LDI4 => 
            next_state <= IF1;
         WHEN STI4 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STI4;
            END IF;
         WHEN LDI2 => 
            next_state <= LDI3;
         WHEN STI2 => 
            next_state <= STI3;
         WHEN STI3 => 
            next_state <= STI4;
         WHEN LDI3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDI4;
            ELSE
               next_state <= LDI3;
            END IF;
         WHEN CalcADDRB => 
            IF (Opcode = op_stb) THEN 
               next_state <= STB1;
            ELSIF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSE
               next_state <= CalcADDRB;
            END IF;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB2;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN STB1 => 
            next_state <= STB2;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN STB2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB2;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ALUMuxSel <= '0';
      ALUop <= "000";
      LBD_STBMux2Sel <= '0';
      LDB_STBMuxSel <= '0';
      LEAMuxSel <= '0';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= '0';
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "00";
      RFMuxSel <= '0';
      RegMuxSel <= '0';
      RegWrite <= '0';
      StoreSR <= '1';
      Trap_JSRMuxSel <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN ADD => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '0' ;
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN L_AND => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '0' ;
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN BR2 => 
            PCMuxSel <= "01";
            LoadPC <= '1';
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '0' ;
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN IF1 => 
            LoadMAR <= '1' ;
            LoadPC <= '1' ;
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= '1';
            ShiftOpSel <= '0';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN ST1 => 
            StoreSR <= '0' ;
            ALUop <= alu_pass;
            LoadMDR <= '1' ;
            ShiftOpSel <= '0' ;
            MDRMuxSel <= '1' ;
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD1 => 
            LoadMDR <= '1' ;
            MREAD_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1' ;
            LoadNZP <= '1' ;
         WHEN JMP_RET => 
            PCMuxSel <= "10";
            LoadPC <= '1';
            StoreSR <= '1';
         WHEN LEA => 
            PCMuxSel <= "01";
            RegWrite <= '1';
            LoadNZP <= '1';
            RegMuxSel <= '0';
            LeaMuxSel <= '1';
         WHEN JSR2 => 
            LoadPC <= '1' ;
            PCMuxSel <= "11";
         WHEN JSRR2 => 
            StoreSR <= '1' ;
            PCMuxSel <= "10" ;
            LoadPC <= '1' ;
            RegWrite <= '0';
         WHEN SHFT_SLL => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '1';
         WHEN SHFT_SRL => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '1';
         WHEN SHFT_SRA => 
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= '1';
            ShiftOpSel <= '1';
         WHEN TRAP1 => 
            MARMuxSel <= '1';
            LoadMAR <= '1';
         WHEN TRAP2 => 
            LoadMDR <= '1' ;
            MREAD_L <= '0' after 6ns;
         WHEN TRAP3 => 
            LoadPC <= '1' ;
         WHEN JSR1 => 
            RegMuxSel <= '1';
            Trap_JSRMuxSel <= '0';
            RegWrite <= '1' ;
            LEAMuxSel <= '0';
         WHEN JSRR3 => 
            RegMuxSel <= '1';
            Trap_JSRMuxSel <= '0';
            RegWrite <= '1';
            LEAMuxSel <= '0';
         WHEN TRAP0 => 
            Trap_JSRMuxSel <= '1';
            RegMuxSel <= '1';
            RegWrite <= '1';
            LEAMuxSel <= '0';
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN CalcADDR1 => 
            ALUMuxSel <= '1';
            ShiftOpSel <= '0';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            LDB_STBMuxSel <= '0';
            LBD_STBMux2Sel <= '0';
         WHEN LDI1 => 
            LoadMDR <= '1' ;
            MREAD_L <= '0' after 6ns;
         WHEN STI1 => 
            StoreSR <= '0' ;
            ALUop <= alu_pass;
            LoadMDR <= '1' ;
            ShiftOpSel <= '0' ;
            MDRMuxSel <= '1' ;
         WHEN LDI4 => 
            RegWrite <= '1' ;
            LoadNZP <= '1' ;
         WHEN STI4 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LDI2 => 
            MARMuxSel <= '1';
            LoadMAR <= '1';
         WHEN STI2 => 
            MARMuxSel <= '1';
            LoadMAR <= '1';
         WHEN STI3 => 
            StoreSR <= '0' ;
            ALUop <= alu_pass;
            LoadMDR <= '1' ;
            ShiftOpSel <= '0' ;
            MDRMuxSel <= '1' ;
         WHEN LDI3 => 
            LoadMDR <= '1' ;
            MREAD_L <= '0' after 6ns;
         WHEN CalcADDRB => 
            ALUMuxSel <= '0';
            ShiftOpSel <= '0';
            ALUop <= alu_add;
            MARMuxSel <= '1';
            LoadMAR <= '1';
            LDB_STBMuxSel <= '1';
            LBD_STBMux2Sel <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1' ;
            MREAD_L <= '0' after 6ns;
            LEAMuxSel <= '0';
            RegMuxSel  <= '0';
            RFMuxSel <= '0';
         WHEN STB1 => 
            StoreSR <= '0' ;
            ALUop <= alu_pass;
            LoadMDR <= '1' ;
            ShiftOpSel <= '0' ;
            MDRMuxSel <= '1' ;
         WHEN LDB2 => 
            RegWrite <= '1' ;
            LoadNZP <= '1' ;
         WHEN STB2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
