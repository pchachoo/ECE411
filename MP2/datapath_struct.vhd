-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 15:26:03 06/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel      : IN     std_logic;
      ALUop          : IN     LC3b_aluop;
      DATAIN         : IN     LC3b_word;
      LBD_STBMux2Sel : IN     std_logic;
      LDB_STBMuxSel  : IN     std_logic;
      LEAMuxSel      : IN     std_logic;
      LoadIR         : IN     std_logic;
      LoadMAR        : IN     std_logic;
      LoadMDR        : IN     std_logic;
      LoadNZP        : IN     std_logic;
      LoadPC         : IN     std_logic;
      MARMuxSel      : IN     std_logic;
      MDRMuxSel      : IN     std_logic;
      PCMuxSel       : IN     LC3B_4MUX_SEL;
      RESET_L        : IN     std_logic;
      RFMuxSel       : IN     std_logic;
      RegMuxSel      : IN     std_logic;       -- RegMuxSel
      RegWrite       : IN     std_logic;
      ShiftOpSel     : IN     std_logic;
      StoreSR        : IN     std_logic;
      Trap_JSRMuxSel : IN     std_logic;
      clk            : IN     std_logic;
      ADDRESS        : OUT    LC3b_word;
      CheckN         : OUT    std_logic;
      CheckP         : OUT    std_logic;
      CheckZ         : OUT    std_logic;
      DATAOUT        : OUT    LC3b_word;
      JSR_R          : OUT    std_logic;
      OpImmBit       : OUT    std_logic;
      Opcode         : OUT    LC3b_opcode;
      PCPlus2out     : OUT    LC3b_word;       -- PCPlus2out
      ShiftAD        : OUT    LC3B_SHFTOP;
      n              : OUT    std_logic;
      p              : OUT    std_logic;
      z              : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - chachon2.ews (linux-a1.ews.illinois.edu)
--          at - 15:26:04 06/02/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out    : LC3b_word;
   SIGNAL ADJ5out     : LC3b_word;
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL ALUMuxout   : LC3b_word;
   SIGNAL ALUMuxout1  : LC3b_word;
   SIGNAL ALUout      : LC3b_word;
   SIGNAL B           : LC3b_word;
   SIGNAL BRaddout    : LC3b_word;
   SIGNAL D           : LC3b_word;
   SIGNAL F           : LC3b_word;
   SIGNAL GenCCout    : LC3b_cc;
   SIGNAL ImmValue4   : LC3B_NIBBLE;
   SIGNAL ImmValue5   : LC3B_IMM5;
   SIGNAL MARMuxout   : LC3b_word;
   SIGNAL MDRMuxout   : LC3b_word;
   SIGNAL MDRout      : LC3b_word;
   SIGNAL PCMuxOut    : LC3b_word;
   SIGNAL PCout       : LC3b_word;
   SIGNAL R7out       : LC3b_reg;
   SIGNAL RFAout      : LC3b_word;
   SIGNAL RFBout      : LC3b_word;
   SIGNAL RFMuxOut    : LC3b_word;
   SIGNAL RFMuxOut1   : LC3b_word;
   SIGNAL RFMuxOut2   : LC3b_word;
   SIGNAL RFMuxOut3   : LC3b_word;
   SIGNAL RegMuxIn2   : LC3b_REG;
   SIGNAL RegMuxIn3   : LC3b_REG;
   SIGNAL SEXT6out    : LC3b_word;
   SIGNAL ShiftMuxOut : LC3b_word;
   SIGNAL ShifterOut  : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL StoreMuxout : LC3b_reg;
   SIGNAL TrapVec8    : LC3B_TRAPVECT8;
   SIGNAL ZEXTOut     : LC3B_WORD;
   SIGNAL dest        : LC3b_reg;
   SIGNAL destIR      : LC3b_reg;
   SIGNAL index6      : LC3b_index6;
   SIGNAL offset11    : LC3b_offset11;
   SIGNAL offset9     : LC3b_offset9;

   -- Implicit buffer signal declarations
   SIGNAL OpImmBit_internal   : std_logic;
   SIGNAL PCPlus2out_internal : LC3b_word;
   SIGNAL ShiftAD_internal    : LC3B_SHFTOP;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      input    : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      clk     : IN     std_logic ;
      Imm5    : IN     LC3B_IMM5 ;
      ADJ5out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word ;
      ALUMuxout : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out  : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      BRaddout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxOut : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      index6    : OUT    LC3b_index6 ;
      offset9   : OUT    LC3b_offset9 ;
      offset11  : OUT    LC3b_offset11 ;
      JSR_R     : OUT    std_logic ;
      ImmValue4 : OUT    LC3B_NIBBLE ;
      ImmValue5 : OUT    LC3B_IMM5 ;
      ShiftAD   : OUT    LC3B_SHFTOP ;
      OpImmBit  : OUT    std_logic ;
      destIR    : OUT    LC3b_reg ;
      TrapVec8  : OUT    LC3B_TRAPVECT8 
   );
   END COMPONENT;
   COMPONENT JSRblock
   PORT (
      ADJ11out   : IN     LC3b_word ;
      PCPlus2out : IN     LC3b_word ;
      clk        : IN     std_logic ;
      D          : OUT    LC3b_word ;
      R7out      : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT LDB_STB
   PORT (
      RFMuxOut1 : IN     LC3b_word ;
      clk       : IN     std_logic ;
      B         : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      clk    : IN     std_logic ;
      dest   : IN     LC3b_reg ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      dest        : IN     LC3b_reg ;
      RFMuxOut    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegMux2
   PORT (
      RegMuxIn1 : IN     LC3b_REG ;
      RegMuxIn2 : IN     LC3b_REG ;
      RegMuxSel : IN     std_logic ;
      dest      : OUT    LC3b_Reg 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      offset6  : IN     LC3b_index6 ;
      SEXT6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SHIFTER
   PORT (
      ImmValue4  : IN     LC3B_NIBBLE ;
      RFAout     : IN     LC3b_word ;
      ShiftAD    : IN     LC3B_SHFTOP ;
      clk        : IN     std_logic ;
      ShifterOut : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      destIR      : IN     LC3b_reg ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT TrapVector
   PORT (
      ZEXTOut   : IN     LC3B_WORD ;
      clk       : IN     std_logic ;
      RegMuxIn3 : OUT    LC3b_REG 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A       : IN     LC3b_word ;
      B       : IN     LC3b_word ;
      C       : IN     LC3b_word ;
      D       : IN     LC3b_word ;   -- := '1';
      Sel     : IN     LC3B_4MUX_SEL ;
      MUX4Out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT
   PORT (
      clk     : IN     std_logic ;
      ZEXTIn  : IN     LC3B_TRAPVECT8 ;
      ZEXTOut : OUT    LC3B_WORD 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSRblock USE ENTITY ece411.JSRblock;
   FOR ALL : LDB_STB USE ENTITY ece411.LDB_STB;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : RegMux2 USE ENTITY ece411.RegMux2;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : SHIFTER USE ENTITY ece411.SHIFTER;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : TrapVector USE ENTITY ece411.TrapVector;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT USE ENTITY ece411.ZEXT;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 
   --Dataout = MDRout
   DATAOUT <= MDRout;                              


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         input    => offset11,
         ADJ11out => ADJ11out
      );
   aADJ5 : ADJ5
      PORT MAP (
         clk     => clk,
         Imm5    => ImmValue5,
         ADJ5out => ADJ5out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout,
         ALUMuxout => ALUMuxout
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out  => ADJ9out,
         PCout    => PCout,
         clk      => clk,
         BRaddout => BRaddout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxOut => RFMuxOut,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         clk       => clk,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         index6    => index6,
         offset9   => offset9,
         offset11  => offset11,
         JSR_R     => JSR_R,
         ImmValue4 => ImmValue4,
         ImmValue5 => ImmValue5,
         ShiftAD   => ShiftAD_internal,
         OpImmBit  => OpImmBit_internal,
         destIR    => destIR,
         TrapVec8  => TrapVec8
      );
   aJSRblock : JSRblock
      PORT MAP (
         ADJ11out   => ADJ11out,
         PCPlus2out => PCPlus2out_internal,
         clk        => clk,
         D          => D,
         R7out      => R7out
      );
   aLDB_STB : LDB_STB
      PORT MAP (
         RFMuxOut1 => RFMuxOut1,
         clk       => clk,
         B         => B
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPslipt : NZPsplit
      PORT MAP (
         clk    => clk,
         dest   => dest,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out_internal
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMAR,
         Output => ADDRESS
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxOut,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout,
         dest        => dest,
         RFMuxOut    => RFMuxOut
      );
   JSRMux : RegMux2
      PORT MAP (
         RegMuxIn1 => destIR,
         RegMuxIn2 => RegMuxIn2,
         RegMuxSel => RegMuxSel,
         dest      => dest
      );
   Trap_JSRMux : RegMux2
      PORT MAP (
         RegMuxIn1 => R7out,
         RegMuxIn2 => RegMuxIn3,
         RegMuxSel => Trap_JSRMuxSel,
         dest      => RegMuxIn2
      );
   LDB_STBSEXT : SEXT6
      PORT MAP (
         clk      => clk,
         offset6  => index6,
         SEXT6out => SEXT6out
      );
   aSHIFTER : SHIFTER
      PORT MAP (
         ImmValue4  => ImmValue4,
         RFAout     => RFAout,
         ShiftAD    => ShiftAD_internal,
         clk        => clk,
         ShifterOut => ShifterOut
      );
   aStoreMux : StoreMux
      PORT MAP (
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         destIR      => destIR,
         StoreMuxout => StoreMuxout
      );
   aTrapVector : TrapVector
      PORT MAP (
         ZEXTOut   => ZEXTOut,
         clk       => clk,
         RegMuxIn3 => RegMuxIn3
      );
   ALUMux : WordMux2
      PORT MAP (
         A   => F,
         B   => ADJ6out,
         Sel => ALUMuxSel,
         F   => ALUMuxout1
      );
   LDB_STBMux : WordMux2
      PORT MAP (
         A   => ALUMuxout1,
         B   => SEXT6out,
         Sel => LDB_STBMuxSel,
         F   => ALUMuxout
      );
   LDB_STBMux2 : WordMux2
      PORT MAP (
         A   => RFMuxOut3,
         B   => B,
         Sel => LBD_STBMux2Sel,
         F   => RFMuxOut
      );
   LEAMux : WordMux2
      PORT MAP (
         A   => RFMuxOut2,
         B   => BRaddout,
         Sel => LEAMuxSel,
         F   => RFMuxOut3
      );
   MARMux : WordMux2
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ShiftMuxOut,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   RFM_PCMux : WordMux2
      PORT MAP (
         A   => RFMuxOut1,
         B   => PCPlus2out_internal,
         Sel => RegMuxSel,
         F   => RFMuxOut2
      );
   RFMux : WordMux2
      PORT MAP (
         A   => MDRout,
         B   => ShiftMuxOut,
         Sel => RFMuxSel,
         F   => RFMuxOut1
      );
   RegORImmMux : WordMux2
      PORT MAP (
         A   => RFBout,
         B   => ADJ5out,
         Sel => OpImmBit_internal,
         F   => F
      );
   ShiftMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => ShifterOut,
         Sel => ShiftOpSel,
         F   => ShiftMuxOut
      );
   PCMux4 : WordMux4
      PORT MAP (
         A       => PCPlus2out_internal,
         B       => BRaddout,
         C       => RFAout,
         D       => D,
         Sel     => PCMuxSel,
         MUX4Out => PCMuxOut
      );
   TrapZEXT : ZEXT
      PORT MAP (
         clk     => clk,
         ZEXTIn  => TrapVec8,
         ZEXTOut => ZEXTOut
      );

   -- Implicit buffered output assignments
   OpImmBit   <= OpImmBit_internal;
   PCPlus2out <= PCPlus2out_internal;
   ShiftAD    <= ShiftAD_internal;

END struct;
